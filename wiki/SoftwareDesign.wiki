#summary Notes about software design

<wiki:toc max_depth="2"/>

= Introduction =

According to [Architecture architecture] we have two packages: KLONDIKE and NEEK, which are shown on figure 1.
NEEK package corresponds to integration layer and KLONDIKE package corresponds to application layer.

<img alt="Layered architecture of NEEK Klondike" src="http://neek-klondike.googlecode.com/svn/wiki/sw-design.png" height=600 width=800>

Figure 1 - Packages KLONDIKE and NEEK

= NEEK package =

This package is the wrapper for several low-level C-libraries, which are provided by Altera and are described in note [http://www.altera.com/literature/an/an527.pdf Implementing an LCD Controller].
Main class of this package, which is responsible for straight communicating with the C-libraries is [https://code.google.com/p/neek-klondike/source/browse/software/neek/LCDTouchscreen.hpp LCDTouchscreen].
The class LCDTouchscreen allows to control LCD touch-screen using the two pairs of methods.
First pair of methods allows to register components which will be displayed on LCD or will handle touch-screen's events.
These components should implement interface [https://code.google.com/p/neek-klondike/source/browse/software/neek/Displayable.hpp Displayable] and/or [https://code.google.com/p/neek-klondike/source/browse/software/neek/Touchable.hpp Touchable].
Second pair of methods is responsible for updating LCD's content and generating of touch-screen's events.
Both of these methods use the same mechanism: when display's content should be regenerated or when clients should be notified about the touch-screen's event, an appropriate method of the callback interface will be called for all registered components.

== Displaying information on the LCD ==

Class [https://code.google.com/p/neek-klondike/source/browse/software/neek/Graphics.hpp Graphics] is designed to simplify process of LCD's content refresh and also this class is high-level interface for displaying components.
In this application we perform only two actions: clearing of display and drawing a bitmap.
Therefore, a class to represent bitmaps is needed.
At this moment we provide class [https://code.google.com/p/neek-klondike/source/browse/software/neek/Bitmap.hpp Bitmap] which is the wrapper over low-level representation of bitmap.
This class not provides any methods and its data could be accessed only by class Graphics through the friendship relations.

= KLONDIKE package =

KLONDIKE package contains only three classes which are used to implement game on the basis of NEEK package.
First class [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Card.cpp Card] is the simple read-only value object that represents playing card.
For designed game we need the standard deck of 52 playing cards.
To specify all of cards in the deck we introduced enumerations of ranks and suits (notably [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Card.cpp CardRank] and [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Card.cpp CardSuit]).

	_Each of these enumerations contains additional element for the situation when default constructor was used (viz [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Card.cpp CardRank_Unknown] and [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Card.cpp CardSuit_Unknown])._
	_Default constructor is required for compatibility with standard containers, when this feature will not be required, this constructor should be dropped (and also additional elements of ranks and suits enumerations)._

Second class represents [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Deck.cpp Deck] of playing cards.
This class is the domain-specific container which works like stack.
At last, third class [https://code.google.com/p/neek-klondike/source/browse/software/klondike/Layout.cpp Layout] implements logic of game and  also it is responsible for displaying of game layout and processing of touch-sreen's events.
Therefore, it implements interfaces Displayable and Touchable from the package NEEK.
